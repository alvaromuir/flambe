// Generated by CoffeeScript 1.6.3
(function() {
  var Post, User, count, create, db, find, findById, findOne, remove, removeByID, removeOne, removeQuick, update, updateByID, updateOne;

  db = require('./db_config');

  User = db.models.User;

  Post = db.models.Post;

  create = function(model, doc, cb) {
    return model.create(doc, function(err, rslt) {
      if (err) {
        cb(err);
      }
      return cb(rslt);
    });
  };

  find = function(model, criteria, cb) {
    return model.find(criteria, function(err, rslt) {
      if (err) {
        cb(err);
      }
      return cb(rslt);
    });
  };

  findById = function(model, id, cb) {
    return model.findById(id, function(err, rslt) {
      if (err) {
        cb(err);
      }
      return cb(rslt);
    });
  };

  findOne = function(model, criteria, cb) {
    return model.findOne(criteria, function(err, rslt) {
      if (err) {
        cb(err);
      }
      return cb(rslt);
    });
  };

  update = function(model, criteria, updates, opt, cb) {
    return model.update(criteria, updates, opt, function(err, rsltCount, res) {
      var rslt;
      if (err) {
        cb(err);
      }
      rslt = {
        total: rsltCount,
        response: res
      };
      return cb(rslt);
    });
  };

  updateByID = function(model, id, updates, opt, cb) {
    return model.findByIdAndUpdate(id, updates, opt, function(err, rslt) {
      if (err) {
        cb(err);
      }
      return cb(rslt);
    });
  };

  updateOne = function(model, criteria, updates, opt, cb) {
    return model.findOneAndUpdate(criteria, updates, opt, function(err, rslt) {
      if (err) {
        cb(err);
      }
      return cb(rslt);
    });
  };

  remove = function(rcrd, criteria, cb) {
    return rcrd.remove(criteria, function(err) {
      if (err) {
        return cb(err);
      }
    });
  };

  removeQuick = function(model, criteria) {
    var removeQuery;
    removeQuery = model.remove(criteria);
    return removeQuery.exec();
  };

  removeByID = function(model, id, opt, cb) {
    return model.findByIdAndRemove(id, opt, function(err, rslt) {
      if (err) {
        cb(err);
      }
      return cb(rslt);
    });
  };

  removeOne = function(model, criteria, opt, cb) {
    return model.findOneAndRemove(criteria, opt, function(err, rslt) {
      if (err) {
        cb(err);
      }
      return cb(rslt);
    });
  };

  count = function(model, criteria, cb) {
    return model.count(criteria, function(err, rslt) {
      if (err) {
        cb(err);
      }
      return cb(rslt);
    });
  };

  module.exports = {
    setup: db,
    User: {
      create: function(doc, cb) {
        return create(User, doc, cb);
      },
      read: function(criteria, cb) {
        return find(User, criteria, cb);
      },
      readById: function(id, cb) {
        return findById(User, id, cb);
      },
      readOne: function(criteria, cb) {
        return findOne(User, criteria, cb);
      },
      update: function(criteria, updates, opt, cb) {
        return update(User, criteria, updates, opt, cb);
      },
      updateByID: function(id, updates, opt, cb) {
        return updateByID(User, id, updates, opt, cb);
      },
      updateOne: function(criteria, updates, opt, cb) {
        return updateOne(User, criteria, updates, opt, cb);
      },
      "delete": function(rcrd, criteria, cb) {
        return remove(rcrd, criteria, cb);
      },
      deleteQuick: function(criteria) {
        return remove(User, criteria);
      },
      deleteByID: function(id, opt, cb) {
        return removeByID(User, id, opt, cb);
      },
      deleteOne: function(criteria, opt, cb) {
        return removeOne(User, criteria, opt, cb);
      },
      count: function(criteria, cb) {
        return count(User, criteria, cb);
      }
    },
    Post: {}
  };

}).call(this);
