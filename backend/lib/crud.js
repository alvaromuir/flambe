// Generated by CoffeeScript 1.6.3
(function() {
  var Post, User, count, create, db, find, findById, findOne, remove, removeById, removeOne, removeQuick, update, updateById, updateOne;

  db = require('./db_config');

  User = db.models.User;

  Post = db.models.Post;

  create = function(model, doc, cb) {
    return model.create(doc, function(err, rslt) {
      return cb(err, rslt);
    });
  };

  find = function(model, criteria, cb) {
    return model.find(criteria, function(err, rslt) {
      return cb(err, rslt);
    });
  };

  findById = function(model, id, cb) {
    return model.findById(id, function(err, rslt) {
      return cb(err, rslt);
    });
  };

  findOne = function(model, criteria, cb) {
    return model.findOne(criteria, function(err, rslt) {
      return cb(err, rslt);
    });
  };

  update = function(model, criteria, updates, opt, cb) {
    return model.update(criteria, updates, opt, function(err, rsltCount, res) {
      var rslt;
      rslt = {
        total: rsltCount,
        response: res
      };
      return cb(err, rslt);
    });
  };

  updateById = function(model, id, updates, opt, cb) {
    return model.findByIdAndUpdate(id, updates, opt, function(err, rslt) {
      return cb(err, rslt);
    });
  };

  updateOne = function(model, criteria, updates, opt, cb) {
    return model.findOneAndUpdate(criteria, updates, opt, function(err, rslt) {
      return cb(err, rslt);
    });
  };

  remove = function(rcrd, criteria, cb) {
    return rcrd.remove(criteria, function(err) {
      return cb(err);
    });
  };

  removeQuick = function(model, criteria) {
    var removeQuery;
    removeQuery = model.remove(criteria);
    return removeQuery.exec();
  };

  removeById = function(model, id, opt, cb) {
    return model.findByIdAndRemove(id, opt, function(err, rslt) {
      return cb(err, rslt);
    });
  };

  removeOne = function(model, criteria, opt, cb) {
    return model.findOneAndRemove(criteria, opt, function(err, rslt) {
      return cb(err, rslt);
    });
  };

  count = function(model, criteria, cb) {
    return model.count(criteria, function(err, rslt) {
      return cb(err, rslt);
    });
  };

  module.exports = {
    setup: db,
    User: {
      create: function(doc, cb) {
        return create(User, doc, cb);
      },
      read: function(criteria, cb) {
        return find(User, criteria, cb);
      },
      readById: function(id, cb) {
        return findById(User, id, cb);
      },
      readOne: function(criteria, cb) {
        return findOne(User, criteria, cb);
      },
      update: function(criteria, updates, opt, cb) {
        return update(User, criteria, updates, opt, cb);
      },
      updateById: function(id, updates, opt, cb) {
        return updateById(User, id, updates, opt, cb);
      },
      updateOne: function(criteria, updates, opt, cb) {
        return updateOne(User, criteria, updates, opt, cb);
      },
      "delete": function(rcrd, criteria, cb) {
        return remove(rcrd, criteria, cb);
      },
      deleteQuick: function(criteria) {
        return removeQuick(User, criteria);
      },
      deleteById: function(id, opt, cb) {
        return removeById(User, id, opt, cb);
      },
      deleteOne: function(criteria, opt, cb) {
        return removeOne(User, criteria, opt, cb);
      },
      count: function(criteria, cb) {
        return count(User, criteria, cb);
      },
      findOrCreateUserByTwitterData: function(data, promise) {
        return findOne(User, {
          'social.twitter.id_str': data.id_str
        }, function(err, rslt) {
          if (err) {
            promise.fail(err);
          }
          if (rslt) {
            return promise.fulfill(rslt);
          } else {
            rslt = {
              email: '',
              name: data.name,
              userName: '',
              displayName: data.name,
              status: 'New to flambé',
              photoUrl: data.profile_image_url,
              social: {
                twitter: {
                  id_str: data.id_str,
                  url: data.url,
                  avatar: data.profile_image_url
                }
              }
            };
            return create(User, rslt, function(err, rslt) {
              if (err) {
                return promise.fail(err);
              } else {
                return promise.fulfill(rslt);
              }
            });
          }
        });
      },
      findOrCreateUserByFacebookData: function(data, promise) {
        return findOne(User, {
          'social.facebook.id': data.id
        }, function(err, rslt) {
          if (err) {
            promise.fail(err);
          }
          if (rslt) {
            return promise.fulfill(rslt);
          } else {
            rslt = {
              email: '',
              name: data.name,
              userName: data.username,
              displayName: data.name,
              status: 'New to flambé',
              photoUrl: "https://graph.facebook.com/" + data.id + "/picture?type=square",
              social: {
                facebook: {
                  id: data.id,
                  url: data.link,
                  avatar: "https://graph.facebook.com/" + data.id + "/picture?type=square"
                }
              }
            };
            return create(User, rslt, function(err, rslt) {
              if (err) {
                return promise.fail(err);
              } else {
                return promise.fulfill(rslt);
              }
            });
          }
        });
      },
      findOrCreateUserByLinkedinData: function(data, promise) {
        return findOne(User, {
          'social.linkedin.id': data.id
        }, function(err, rslt) {
          if (err) {
            promise.fail(err);
          }
          if (rslt) {
            return promise.fulfill(rslt);
          } else {
            rslt = {
              email: '',
              name: data.firstName + ' ' + data.lastName,
              userName: '',
              displayName: data.firstName + ' ' + data.lastName,
              status: 'New to flambé',
              photoUrl: data.pictureUrl,
              social: {
                linkedin: {
                  id: data.id,
                  url: data.publicProfileUrl,
                  avatar: data.pictureUrl
                }
              }
            };
            return create(User, rslt, function(err, rslt) {
              if (err) {
                return promise.fail(err);
              } else {
                return promise.fulfill(rslt);
              }
            });
          }
        });
      }
    },
    Post: {}
  };

}).call(this);
